################
Behaviour Box
################

``Version 3.0.20170201.8``

This repository contains a set of files to implement a Go-No-Go task
using an Arduino and Python 2.7. By itself this collects some summary
information for a behavioural trial, but is not a stand alone
implementation. In addition to what is recorded here, I record the
signal direct from the lick sensor using
`Wavesurfer <https://github.com/JaneliaSciComp/Wavesurfer>`__.

The two components to this implementation are the Arduino code, found in
``./behaviourbox/behaviourbox.ino`` and a Python wrapper for
communicating with this code ``./SerialControl.py``.

Note: *The python wrapper is not written in a cross platform way, it
relies on specific bindings for windows keyboard events.*

The behaviour box program is now split into a handful of modules. Each
module is mostly holding utility functions for the box as a whole. The
``behaviourbox.ino`` itself only contains ``setup`` and ``loop``
functions, which call the other components as necessary.


Software
========

behaviourbox.ino
----------------

This program delivers sensory stimulation and opens water valve when the
animal touches the licking sensor within a certain time window.

Requirements
~~~~~~~~~~~~

Setup connections:
------------------

Table: Analog connections to lick controller

Global Variables
----------------

+----------+--------+----------------------------------------------------------------+
| Variable | pin    | Physical connection                                            |
| Name     |        |                                                                |
+==========+========+================================================================+
| recTrig  | ``3``  | short recording trigger (10ms TTL pulse )                      |
+----------+--------+----------------------------------------------------------------+
| bulbTrig | ``4``  | full trial duration signal (bulb style trigger)                |
+----------+--------+----------------------------------------------------------------+
| stimulus | ``5``  | Connect to Stimulus device, outputs a variable duration pulse  |
| Pin      |        |                                                                |
+----------+--------+----------------------------------------------------------------+
| buzzer   | ``6``  | Connect to punishment device, (TTL trigger)                    |
| Pin      |        |                                                                |
+----------+--------+----------------------------------------------------------------+
| speaker  | ``7``  | output to auditory cue speaker                                 |
| Pin      |        |                                                                |
+----------+--------+----------------------------------------------------------------+
| water    | ``10`` | Connect to water valve power supply                            |
| Port     |        |                                                                |
+----------+--------+----------------------------------------------------------------+
| lick     | ``A0`` | The Piezo Amplifier is connected to the analog input           |
| Sensor   |        |                                                                |
+----------+--------+----------------------------------------------------------------+

Table: connections

Files
-----

The header files in the behaviourbox folder contain the functions
required to run the behaviourbox code. There are currently 7 header
files: 
    1. ``global_variables.h`` 
    2. ``prototypes.h``
    3. ``timing.h``
    4. ``sensors.h`` 
    5. ``states.h`` 
    6. ``SerialComms.h``
    7. ``single_port_setup.h``

global_variables.h
~~~~~~~~~~~~~~~~~~~

contains definitions of all variables that are used by multiple
functions and expected to have persistent values between the functions.
These include the initialisation time, the various timing parameters, as
well as any additional options that I have decided to make available.

+------------------+------------------------+
| variable         | description            |
+==================+========================+
| t\_init          | not settable. This is  |
|                  | the variable that the  |
|                  | other times a measured |
|                  | relative to            |
+------------------+------------------------+
| t\_noLickPer     | A time measured in     |
|                  | milliseconds. After    |
|                  | this amount of time    |
|                  | the program will break |
|                  | out of a trial if a    |
|                  | lick is detected       |
|                  | before the stimulus.   |
|                  | If the value is 0 then |
|                  | licks before the       |
|                  | stimulus are ignored   |
|                  | altogether.            |
+------------------+------------------------+
| trial\_delay     | Amount of time in      |
|                  | milliseconds to delay  |
|                  | the start of a trial   |
+------------------+------------------------+
| t\_rewardDEL     | Amount of time in      |
|                  | milliseconds to delay  |
|                  | checking for licks     |
|                  | after a stimulus       |
+------------------+------------------------+
| t\_rewardDUR     | Amount of time in      |
|                  | milliseconds to check  |
|                  | for licks              |
+------------------+------------------------+
| t\_trialDUR      | Total time in          |
|                  | milliseconds that the  |
|                  | trial should last      |
+------------------+------------------------+
| ---------------- | ---------------------  |
+------------------+------------------------+
| t\_stimONSET     | The time in            |
|                  | milliseconds, relative |
|                  | to the trial start     |
|                  | time, that the         |
|                  | stimulus turns on      |
+------------------+------------------------+
| t\_stimDUR       | Amount of time in      |
|                  | milliseconds to keep   |
|                  | the stimulus on        |
+------------------+------------------------+
| ---------------- | ---------------------  |
+------------------+------------------------+
| timeout          | Boolean value. If True |
|                  | enable the recursive   |
|                  | timeout punishment     |
+------------------+------------------------+
| ---------------- | ---------------------  |
+------------------+------------------------+
| debounce         | Number of milliseconds |
|                  | to delay between       |
|                  | reading the lick       |
|                  | sensor value.          |
+------------------+------------------------+
| lickThres        | The threshold on the   |
|                  | licksensor required to |
|                  | call a lick. This is a |
|                  | number between 0 -     |
|                  | 1024 (multiply by 5    |
|                  | V/1024 to get voltage) |
+------------------+------------------------+
| ---------------- | ---------------------  |
+------------------+------------------------+
| minlickCount     | The number of licks    |
|                  | required to count as a |
|                  | response, ie to open   |
|                  | the water valve, or to |
|                  | deliver a punishment   |
+------------------+------------------------+
| lickTrigReward   | Boolean, set true to   |
|                  | enable the reward to   |
|                  | be delivered           |
|                  | immediatly after the   |
|                  | min licks are reached. |
|                  | If false the reward is |
|                  | deliverd at the end of |
|                  | the response duration  |
+------------------+------------------------+
| reward\_nogo     | Boolean, set true if   |
|                  | you want a correct     |
|                  | rejection to be        |
|                  | rewarded at the end on |
|                  | the reward period      |
+------------------+------------------------+
| ---------------- | ---------------------  |
+------------------+------------------------+
| mode             | {'-', 'O', 'H'} a      |
|                  | character to represent |
|                  | the type of mode to    |
|                  | run in. If the mode is |
|                  | 'H' the system will    |
|                  | delver a stimulus and  |
|                  | a reward in response   |
|                  | to the animal's lick.  |
|                  | If the mode is 'O' the |
|                  | system delivers a      |
|                  | stimulus and listens   |
|                  | for a response         |
+------------------+------------------------+
| ---------------- | ---------------------  |
+------------------+------------------------+
| waterVol         | Amount of time in      |
|                  | milliseconds to hold   |
|                  | the water valve open   |
|                  | for                    |
+------------------+------------------------+
| trialType        | character code {'G' or |
|                  | 'N'} to determine if   |
|                  | this is a go or no go  |
|                  | trial. This is used to |
|                  | determine if the water |
|                  | valve will open in     |
|                  | response to animal's   |
|                  | lick                   |
+------------------+------------------------+
| ---------------- | ---------------------  |
+------------------+------------------------+
| verbose          | Boolean, if True will  |
|                  | enable full debug      |
|                  | printing...(might be   |
|                  | deprecated?)           |
+------------------+------------------------+
| break\_wrongChoi | Boolean, deprecated    |
| ce               |                        |
+------------------+------------------------+
| punish\_tone     | deprecated             |
+------------------+------------------------+
| audio            | Boolean, enables       |
|                  | auditory cues for the  |
|                  | response period        |
+------------------+------------------------+
| ---------------- | ---------------------  |
+------------------+------------------------+

--------------

SerialController.py
===================

This python script is a wrapper for communicating with the Arduino
program. At it's heart is a simple loop that reads data transmitted
through a serial connection. This is not a necessary component, however
I wrote it to make running trials a lot easier.

call signature

::

    usage: SerialControl.py [-h] [-af] [--trials [TRIALS [TRIALS ...]]]
                            [-lt LICKTHRES] [--verbose] [-restore]
                            [--repeats REPEATS] [--port PORT] [--ITI ITI ITI]
                            [-rdur T_RDUR] [-ltr] [--t_stimONSET T_STIMONSET]
                            [--datapath DATAPATH] [-i ID] [-m MODE] [-to TIMEOUT]
                            [-nlp NOLICK] [-w WEIGHT] [-td TRIALDUR]
                            [-rdel T_RDELAY] [-p] [-noise] [-rng] [-lc LCOUNT]

Optional Arguments:
-------------------

.. py:data:: help
    
    ``-h, --help``

    show this help message and exit

.. py:data:: audio
    
    ``-af, --audio``


    provides audio feedback during the trials this is not to be confused
    with the noise played to simulate / mask the scanners

.. py:data:: trials

    ``--trials [TRIALS [TRIALS ...]]``


    stimulus durations to run on each trial. That is, the duration of the
    stimulus pulse.

.. py:data:: lickthres

    ``-lt LICKTHRES, --lickThres LICKTHRES``

    set ``lickThres`` in arduino

.. py:data:: verbose

    ``--verbose``


    for debug this will print everything if enabled

.. py:data:: restore
    
    ``-restore``

    Use to look up previous settings in the comms.ini file

.. py:data:: repeats

    ``--repeats REPEATS``


    the number of times this block should repeat, by default this is 1

.. py:data:: port

    ``--port PORT``


    port that the Arduino is connected to

.. py:data:: ITI

    ``--ITI ITI ITI``

    an interval for randomising between trials

.. py:data:: t_rDUR

    ``-rdur T_RDUR, --t_rDUR T_RDUR``


    set end time of reward epoch

.. py:data:: lickTrigReward
    
    ``-ltr, --lickTrigReward``

    flag to allow licks to trigger the reward immediatly

.. py:data:: t_stimONSET

    ``--t_stimONSET T_STIMONSET``

    sets the time after trigger to run the first stimulus

.. py:data:: datapath

    ``--datapath DATAPATH``

    path to save data to, by default is the current working directory

    
.. py:data:: ID

    ``-i ID, --ID ID``

    identifier for this animal/run

.. py:data:: mode

    ``-m MODE, --mode MODE``


    the mode ``h`` abituaton or ``o`` perant, by default will look in the
    config table

.. py:data:: timeout

    ``-to TIMEOUT, --timeout TIMEOUT``

    set the timeout duration for incorrect licks

.. py:data:: noLick
    
    ``-nlp NOLICK, --noLick NOLICK``

    set ``t_noLickPer`` in arduino


.. py:data:: weight

    ``-w WEIGHT, --weight WEIGHT``

    weight of the animal in grams

.. py:data:: trialDur
    
    ``-td TRIALDUR, --trialDur TRIALDUR``

    set minimum trial duration

.. py:data:: r_rDELAY
    
    ``-rdel T_RDELAY, --t_rDELAY T_RDELAY``

    set start time of reward epoch

.. py:data:: punish
    
    ``-p, --punish``


    sets ``break_wrongChoice`` to True, incorrect licks will end an operant
    trial early

.. py:data:: noise
    
    ``-noise``

    plays a noise during trials

    
.. py:data:: reward_nogo

    ``-rng, --reward_nogo``


    flag to allow a water delivery following no lick of a no go stim

    
.. py:data:: lcount

    ``-lc LCOUNT, --lcount LCOUNT``


    set ``minlickCount`` in arduino

Interactive Options
-------------------

+-------+---------------------------------------------------+
| key   | option                                            |
+=======+===================================================+
| H     | This menu                                         |
+-------+---------------------------------------------------+
| P     | Punish                                            |
+-------+---------------------------------------------------+
| S     | toggle single stimulus                            |
+-------+---------------------------------------------------+
| < >   | lick threshold                                    |
+-------+---------------------------------------------------+
| ?     | show threshold                                    |
+-------+---------------------------------------------------+
| [ ]   | lickcount                                         |
+-------+---------------------------------------------------+
| \\    | show lickcount                                    |
+-------+---------------------------------------------------+
| tab   | toggle mode                                       |
+-------+---------------------------------------------------+
| : "   | adjust noLick period                              |
+-------+---------------------------------------------------+
| L     | show noLick period                                |
+-------+---------------------------------------------------+
| ( )   | adjust trial duration                             |
+-------+---------------------------------------------------+
| T     | show trial duration period                        |
+-------+---------------------------------------------------+
| Y     | toggle timeout (requires punish to take effect)   |
+-------+---------------------------------------------------+
| B     | toggle bias correction                            |
+-------+---------------------------------------------------+

1. The program starts
2. The program opens communications with available serial port The
   program waits until it gets the arduino is active, and prints all
   output until the ready signal is transmitted. Which is
   ``- Status: Ready``

3. The program starts a block
4. The program transmits the dict ``params``, which holds all parameters
   for a single trial. The condition values get updated; based on the
   frequencies being sent, all contents of ``params`` are transmitted to
   the behaviour controller.

5. The program prints the frequencies and the condition to the screen
   and a random timeout is started.
6. The program initiates a trial by sending a literal ``"GO"`` to the
   behaviour box.

   -  The behaviour box runs one trial, with the parameters set
      previously

7. The program records the output from behaviorCOMs into a dict, which
   later will be converted to a data frame for analysis.

8. The program repeats sending mode flags until all stimuli combinations
   have been run through.

References
==========
